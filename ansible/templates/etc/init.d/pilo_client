#!/bin/sh
### BEGIN INIT INFO
# Provides:          pilo_client
# Required-Start:    $local_fs $remote_fs $network $syslog exim4 
# Required-Stop:     $local_fs $remote_fs $network $syslog exim4
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: PILO Client Service
# Description:       Start and stop PILO Client 
### END INIT INFO

# Do NOT "set -e"
set -x

ETH=eth0
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="Pilo Client startup"
NAME=pilo_client
SCRIPTNAME=/etc/init.d/$NAME
DAEMON_USER=root
DAEMON_GROUP=root
PIDFILE=/var/run/$NAME.pid
LOG_PATH=/var/log

# Read configuration variable file if it is present
[ -r /etc/default/$NAME.conf ] && . /etc/default/$NAME.conf

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

DAEMON="/usr/bin/python"
DAEMON_ARGS="/vagrant/shared/pox/pox.py log --file=$LOG_PATH/${NAME}.log log.level --DEBUG --no-default info.packet_dump proto.arp_responder --eat_packets=False --$PILO_IP=$BR_MAC pilo.pilo_client --retransmission_timeout=$RETRANSMISSION_TIMEOUT --udp_ip=$UDP_IP --this_if=br-int --udp_port=$UDP_PORT --controller_mac=$CONTROLLER_MAC"
START_STOP_DAEMON_OPTIONS="--verbose --chuid $DAEMON_USER:$DAEMON_GROUP"

get_pid() {
  cat "$PIDFILE"
}

#
# Function that starts the service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

  read PID <$PIDFILE
  if  kill -0 ${PID} 
  then
    return 1
  fi
  ovs-vsctl add-br br-int
  for interface in $OVS_INTERFACES
  do
    echo "$interface"
    ovs-vsctl add-port br-int $interface
    ip addr flush dev $interface
  done

  ip addr add $PILO_ADDR dev br-int
  ovs-vsctl set bridge br-int other-config:hwaddr=$BR_MAC
  ovs-vsctl set-controller br-int tcp:127.0.0.1:6633


  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --make-pidfile --background --pidfile $PIDFILE --exec $DAEMON --test >> ${LOG_PATH}/${NAME}.out 2>> ${LOG_PATH}/${NAME}.err || return 1
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --make-pidfile --background --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS >> ${LOG_PATH}/${NAME}.out 2>> ${LOG_PATH}/${NAME}.err || return 2
	
  return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2

  for interface in $OVS_INTERFACES
  do
    echo "$interface"
    ovs-vsctl del-port br-int $interface
    ifdown $interface
    ifup $interface
  done
  ip addr del $PILO_ADDR dev br-int
  ovs-vsctl del-br br-int
	
  # Many daemons don't delete their pidfiles when they exit.
  rm -f $PIDFILE
  return "$RETVAL"
}

case "$1" in
	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			*) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			*) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
  restart)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac

		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			*) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;

  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
		;;
	*)
		echo "Usage: $SCRIPTNAME {start|stop|restart|status}" >&2
		exit 3
		;;
esac

:
